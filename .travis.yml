java:
- "1.8"
language: java
#script: mvn clean package

cache:
  directories:
  - .autoconf
  - $HOME/.m2

before_install:
#  - gem install package_cloud
  - sudo apt-get install jq
  - wget -O ~/codacy-coverage-reporter-assembly-latest.jar $(curl https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r .assets[0].browser_download_url)

#after_success:
#  - mvn clean package cobertura:cobertura coveralls:cobertura
#  - java -cp ~/codacy-coverage-reporter-assembly-latest.jar com.codacy.CodacyCoverageReporter -l Java -r  target/site/cobertura/coverage.xml

# script:
#     - package_cloud push boycook/snapshots/org/cccs/ target/movie-service.jar

#deploy:
#  provider: elasticbeanstalk
#  skip_cleanup: true
#  zip_file: target/movie-service.jar
#  access_key_id: $AWS_ACCESS_KEY_ID
#  secret_access_key: $AWS_SECRET_ACCESS_KEY
#  bucket_name: $AWS_BUCKET_NAME
#  region: "eu-west-2"
#  app: "movie-service"
#  env: "movie-service-prod"

#    - stage: publish artifact
#      script: package_cloud push boycook/snapshots/org/cccs/ target/movie-service.jar

jobs:
  include:
    - stage: build
      script: mvn clean package #&& package_cloud push boycook/snapshots/org/cccs/ target/movie-service.jar
      deploy:
        provider: packagecloud
        skip_cleanup: true
        artifact: target/movie-service.jar
        repository: "snapshots"
        username: "boycook"
        token: $PACKAGECLOUD_TOKEN

#    - stage: build
#      script: mvn clean compile
#    - stage: test
#      script: mvn clean test cobertura:cobertura coveralls:cobertura && java -cp ~/codacy-coverage-reporter-assembly-latest.jar com.codacy.CodacyCoverageReporter -l Java -r target/site/cobertura/coverage.xml
#    - stage: deploy to AWS
#      script: mvn clean package
#      deploy:
#        provider: elasticbeanstalk
#        skip_cleanup: true
#        zip_file: target/movie-service.jar
#        access_key_id: $AWS_ACCESS_KEY_ID
#        secret_access_key: $AWS_SECRET_ACCESS_KEY
#        bucket_name: $AWS_BUCKET_NAME
#        region: "eu-west-2"
#        app: "movie-service"
#        env: "movie-service-prod"